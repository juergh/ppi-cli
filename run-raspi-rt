#!/bin/bash -eu
#
# Run the raspi-rt tests
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	if [ "${rc}" -eq 0 ] ; then
		pr_info "Test result: PASSED"
	else
		pr_info "Test result: FAILED" >&2
	fi
}

function pr_info()
{
	echo "[${HOST}] ${*}"
}

function target_pi_cli()
{
	../bottle-pi/target-pi-cli rpi-master:5000 "${HOST}" "${@}"
}

function do_update_image()
{
	local image=${1}

	pr_info "Update image: ${image}"
	target_pi_cli update "${image}" --timeout 600
}

function do_add_repos()
{
	local repos=("${@}")
	local base_cmd cmds full_cmd

	base_cmd="sudo add-apt-repository --yes --no-update"
	cmds=()
	for repo in "${repos[@]}" ; do
		case "${repo}" in
			POCKET:*)
				cmds+=("${base_cmd} --pocket ${repo#POCKET:}")
				;;
			PPA:*)
				cmds+=("${base_cmd} --ppa ${repo#PPA:}")
				;;
			*)
				pr_info "Invalid repository: ${repo}" >&2
				exit 1
		esac
	done

	full_cmd=$(printf "%s && " "${cmds[@]}")
	full_cmd="${full_cmd} sudo apt-get --yes update"

	pr_info "Add repos: ${*}"
	target_pi_cli run "${full_cmd}"
}

function do_install_kernel()
{
	local kernel=${1}

	pr_info "Install kernel: ${kernel}"
	target_pi_cli run "sudo apt-get --yes install ${kernel}"
}

function do_reboot()
{
	pr_info "Reboot"
	target_pi_cli reboot --timeout 60
}

function do_check_kernel()
{
	local kernel=${1}

	pr_info "Check running kernel release: ${kernel}"
	target_pi_cli run "uname -r && test \$(uname -r) = ${kernel}"
}

function do_info()
{
	pr_info "Info"
	target_pi_cli info
}

function do_run_rt_tests()
{
	pr_info "Run raspi-rt tests"
	target_pi_cli run "rm -rf raspi-rt && git clone https://git.launchpad.net/~juergh/+git/raspi-rt && cd raspi-rt && ./tests/lsusb"
}

function usage()
{
	cat <<EOF
Usage: run-raspi-rt [-h] [-i IMAGE] [-k KERNEL] [-r REPO] [-v VERSION] HOST

Run the raspi-rt tests on a remote Raspberry Pi host.

Positional arguments:
  HOST                   Hostname of the remote Raspberry Pi.

Optional arguments:
  -h, --help             Show this help text and exit.
  -i, --image IMAGE      Update the host to image <IMAGE> before running the
                         tests.
  -k, --kernel KERNEL    Install the kernel <KERNEL> before running the tests.
  -r, --repo REPO        Add APT repo <REPO> to the host. Can be provided
                         multiple times.
  -v, --version VERSION  Install the specific kernel version <VERSION>.
EOF
}

HOST=
image=
kernel=
repos=()
version=

while [ "${#}" -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-i|--image)
			shift
			image=${1}
			;;
		-k|--kernel)
			shift
			kernel=${1}
			;;
		-r|--repo)
			shift
			repos+=("${1}")
			;;
		-v|--version)
			shift
			version=${1}
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -z "${HOST}" ] ; then
				HOST=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${HOST}" ] ; then
	usage
	exit 2
fi

trap out EXIT INT TERM HUP

# Update the image
if [ -n "${image}" ] ; then
	do_update_image "${image}"
fi

# Add the repositories
if [ "${#repos[@]}" -gt 0 ] ; then
	do_add_repos "${repos[@]}"
fi

# Install, reboot and check the kernel
if [ -n "${kernel}" ] ; then
	if [ -n "${version}" ] ; then
		do_install_kernel "${kernel}=${version}"
	else
		do_install_kernel "${kernel}"
	fi
	do_reboot
	if [ -n "${version}" ] ; then
		# Determine the abi from the (package) version
		readarray -t c < <(echo "${version}" | tr '.-' '\n')
		abi="${c[0]}.${c[1]}.${c[2]}-${c[3]}"

		# Determine the flavor name from the (package) name
		flavor=${kernel%-unstable}
		flavor=${flavor#linux-}

		# Check the running kernel
		do_check_kernel "${abi}-${flavor}"
	fi
fi

# Show system info
do_info

# Finally run the raspi-rt tests
do_run_rt_tests
