#!/bin/bash -eu

function pr_passed() { echo -ne "\e[32mPASSED\e[0m" ; }
function pr_failed() { echo -ne "\e[31mFAILED\e[0m" ; }

function out()
{
	local rc=${?}
	local fail host

	trap - EXIT INT TERM HUP

	echo "-- Results:"
	fail=0
	for host in "${HOSTS[@]}" ; do
		result=$(tail -1 "${host}".log)
		case "${result}" in
			PASSED)
				result=$(pr_passed)
				;;
			*)
				result=$(pr_failed)
				fail=1
				;;
		esac
		printf "%-25s: %s\n" "${host}" "${result}"
	done

	if [ "${rc}" -eq 0 ] && [ "${fail}" -eq 1 ] ; then
		rc=1
	fi

	exit "${rc}"
}

function do_run()
{
	local host=${1}
	shift

	if "${@}" > "${host}".log 2>&1 ; then
		echo "PASSED" >> "${host}".log
	else
		echo "FAILED" >> "${host}".log
	fi
}

# Read the hosts from stdin
HOSTS=()
while read -r host ; do
	HOSTS+=("${host}")
done

trap out EXIT INT TERM HUP

# Run the commands in parallel on the provided hosts
for host in "${HOSTS[@]}"; do
	cmd=()
	for arg in "${@}" ; do
		if [ "${arg}" = "{}" ] ; then
			cmd+=("${host}")
		else
			cmd+=("${arg}")
		fi
	done

	echo "-- Run ${cmd[*]}"
	do_run "${host}" "${cmd[@]}" &
done

# Wait for all commands to finish
echo "-- Wait for commands(s) to finish"
wait
