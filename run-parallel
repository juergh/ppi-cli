#!/bin/bash -eu

function pr_passed() { echo -ne "\e[32mPASSED\e[0m" ; }
function pr_failed() { echo -ne "\e[31mFAILED\e[0m" ; }

function out()
{
	local rc=${?}
	local fail host

	trap - EXIT INT TERM HUP

	echo
	echo "-- Results:"
	fail=0
	for host in "${HOSTS[@]}" ; do
		result=$(tail -1 "${host}".log)
		case "${result}" in
			PASSED)
				result=$(pr_passed)
				;;
			*)
				result=$(pr_failed)
				fail=$((fail + 1))
				;;
		esac
		printf "%-25s: %s\n" "${host}" "${result}"
	done

	if [ "${FAIL_ALL}" -eq 1 ] && [ "${#HOSTS[@]}" -eq "${fail}" ] ; then
		rc=1
	fi

	if [ "${rc}" -eq 0 ] && [ "${fail}" -ne 0 ] ; then
		rc=1
	fi

	exit "${rc}"
}

function do_run_single()
{
	local host=${1}
	shift

	if [ $# -eq 0 ] ; then
		RESULT="PASSED"
		return
	fi

	echo "RUN ${*}" >> "${host}".log
	if "${@}" >> "${host}".log 2>&1 ; then
		RESULT="PASSED"
	else
		RESULT="FAILED"
	fi
	echo "${RESULT}" >> "${host}".log
	echo -n "."
}

function do_run()
{
	local host=${1}
	shift
	local cmd

	true > "${host}".log
	cmd=()
	while [ ${#} -gt 0 ] ; do
		case "${1}" in
			\;)
				do_run_single "${host}" "${cmd[@]}"
				if [ "${RESULT}" = "FAILED" ] ; then
					# Bail out on first failure
					return
				fi
				cmd=()
				;;
			*)
				cmd+=("${1}")
				;;
		esac
		shift
	done
	do_run_single "${host}" "${cmd[@]}"
}

function usage()
{
	cat <<EOF
Usage: run-parallel [-a] [-h] -- PROGRAM [ARG...] [\; PROGRAM [ARG...]...]

Run the provided program(s) in parallel.

Optional arguments:
  -a, --fail-all  Exit with a non-zero status only if all parallel program
                  executions fail.
  -h, --help      Show this help text and exit.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

FAIL_ALL=0
while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-a|--fail-all)
			FAIL_ALL=1
			;;
		-h|--help)
			usage
			exit
			;;
		--)
			shift
			break
			;;
		*)
			echo "Invalid argument: ${1}" >&2
			exit 1
			;;
	esac
	shift
done

if [ ${#} -eq 0 ] ; then
	usage
	exit 2
fi

if [ -t 0 ] ; then
	echo "Unable to read hostname(s) from standard input" >&2
	exit 2
fi

# Read the hosts from stdin
HOSTS=()
while read -r host ; do
	HOSTS+=("${host}")
done

trap out EXIT INT TERM HUP

# Run the commands in parallel on the provided hosts
for host in "${HOSTS[@]}"; do
	cmd=()
	for arg in "${@}" ; do
		if [ "${arg}" = "{}" ] ; then
			cmd+=("${host}")
		else
			cmd+=("${arg}")
		fi
	done

	echo "-- Run ${cmd[*]}"
	do_run "${host}" "${cmd[@]}" &
done

# Wait for all commands to finish
echo -n "-- Wait for command(s) to finish "
wait
